#!/usr/bin/env node
const {ProjectTemplateConfig} = require('../config/config');
const {projectInfoQuestions} = require('../config/questions')
const DomainModelCreateAction = require('../action/DomainModelCreateAction')
const Program = require("commander");
const Prompt = require("inquirer");
const {Project} = require('../action/ProjectAction')
const chalk = require('chalk')
const Table = require('cli-table');
const packageConfig = require('../package.json')
const semver = require('semver')
const axios = require('axios');
const logger = require('../util/logger')
let _ = require('lodash')
const ora = require('ora')


axios.interceptors.response.use(
    response => {
        return response
    },
    error => {
        let originalRequest = error.config
        if (error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1 && !originalRequest._retry) {
            // eslint-disable-next-line
            return Promise.reject('TIMEOUT')
        }
        return Promise.reject(error)
    }
)

async function getVersion(id) {
    axios.defaults.timeout = 100;
    return await axios.get(`https://registry.npmjs.org/${id}`)
}

Program
    .version(`v${packageConfig.version}`)
    .description("快速构建支持SpringBoot的Maven多模块应用")


/**
 * 命令行函数定义
 */
function viewProgram() {
    Program
        .command("init")
        .description("创建一个新的Maven多模块项目")
        .action(() => {
            Prompt.prompt(projectInfoQuestions).then(result => {
                console.log("您选择的平台类型信息如下：");
                // 1. 项目名称
                ProjectTemplateConfig.projectName = result.projectName
                ProjectTemplateConfig.projectVersion = result.projectVersion
                ProjectTemplateConfig.projectDescription = result.projectDescription
                ProjectTemplateConfig.springBootVersion = result.springBootVersion
                ProjectTemplateConfig.groupId = result.groupId
                ProjectTemplateConfig.projectAuthor = result.projectAuthor
                ProjectTemplateConfig.port = result.port
                const project = new Project({
                    projectTemplateConfig: ProjectTemplateConfig
                })
                project.create();
            })
        });


    const installProgram = Program
        .command("install")
        .alias('i')
        .option('-i, --tables [String]', '要安装的表模型名称(可以使用,分隔)')
        .option('-s, --suffix [String]', '模型后缀名', false)
        .option('-p, --path [String]', '要安装的路径地址(相对路径)', false)
        .description("安装数据模型");

    installProgram.action(() => {
        try {
            let domainModelCreateAction = new DomainModelCreateAction();
            if (_.isString(installProgram.tables) && _.isString(installProgram.path)) {
                domainModelCreateAction.buildAndAdd({
                    "suffix": _.isString(installProgram.suffix) ? installProgram.suffix : 'DO',
                    "tableName": _.isString(installProgram.tables) ? _.split(installProgram.tables).filter(entry => {
                        return !_.isEmpty(entry)
                    }) : [],
                    "path": `${installProgram.path}`
                })
            } else {
                // 直接读取配置
                domainModelCreateAction.build();
            }
        } catch (Error) {
            logger.error(Error.message)
        }
    });
    Program.parse(process.argv);
}

// 打印当前版本号
console.log(chalk.cyan(`JMVN CLI v${packageConfig.version}`))
getVersion(packageConfig.name).then(res => {
    // 获取网络最新版本
    const lastedVersion = res.data['dist-tags']['latest']
    // 如果不是最新版本提示建议进行升级
    if (!semver.satisfies(packageConfig.version, lastedVersion)) {
        const updateTable = new Table({
            style: {'padding-left': 0, 'padding-right': 0, 'border': ['red']},
        });
        updateTable.push([` Update available: ${lastedVersion} `])
        console.log(chalk.red(updateTable))
        console.log(chalk.red(`最新版本为:${lastedVersion},建议你升级为新版`))
        console.log(chalk.green(`> npm i -g jmvn`))
    } else {
        viewProgram()
    }
}).catch(error => {
    // 超时就不检查版本了,直接使用
    if (error === 'TIMEOUT') {
        viewProgram()
    }
})


