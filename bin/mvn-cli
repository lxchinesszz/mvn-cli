#!/usr/bin/env node
const {ProjectTemplateConfig} = require('../config/config');
const {projectInfoQuestions} = require('../config/questions')
const {DbQuestions} = require('../config/db_questions')
const DomainModelCreateAction = require('../action/DomainModelCreateAction')
const Program = require("commander");
const Prompt = require("inquirer");
const {Project} = require('../action/ProjectAction')
const chalk = require('chalk')
const Table = require('cli-table');
const packageConfig = require('../package.json')
const semver = require('semver')
const axios = require('axios');

axios.interceptors.response.use(
    response => {
        return response
    },
    error => {
        let originalRequest = error.config
        if (error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1 && !originalRequest._retry) {
            // eslint-disable-next-line
            return Promise.reject('TIMEOUT')
        }
        return Promise.reject(error)
    }
)

async function getVersion(id) {
    axios.defaults.timeout = 100;
    return await axios.get(`https://registry.npmjs.org/${id}`)
}

Program
    .version(`v${packageConfig.version}`)
    .description("快速构建支持SpringBoot的Maven多模块应用")


function viewProgram() {
    Program
        .command("create")
        .alias("c")
        .description("初始化平台")
        .action(() => {
            Prompt.prompt(projectInfoQuestions).then(result => {
                console.log("您选择的平台类型信息如下：");
                // 1. 项目名称
                ProjectTemplateConfig.projectName = result.projectName
                ProjectTemplateConfig.projectVersion = result.projectVersion
                ProjectTemplateConfig.projectDescription = result.projectDescription
                ProjectTemplateConfig.springBootVersion = result.springBootVersion
                ProjectTemplateConfig.groupId = result.groupId
                ProjectTemplateConfig.projectAuthor = result.projectAuthor
                ProjectTemplateConfig.port = result.port
                const project = new Project({
                    projectTemplateConfig: ProjectTemplateConfig
                })
                project.create();
            })
        });


    Program
        .command("install")
        .alias("i")
        .description("安装数据模型")
        .action(() => {
            // 读取配置文件
            let domainModelCreateAction = new DomainModelCreateAction();
            domainModelCreateAction.build();
        });
    Program.parse(process.argv);
}

// 打印当前版本号
console.log(chalk.cyan(`JMVN CLI v${packageConfig.version}`))
getVersion(packageConfig.name).then(res => {
    // 获取网络最新版本
    const lastedVersion = res.data['dist-tags']['latest']
    // 如果不是最新版本提示建议进行升级
    if (!semver.satisfies(packageConfig.version, lastedVersion)) {
        const updateTable = new Table({
            style: {'padding-left': 0, 'padding-right': 0, 'border': ['red']},
        });
        updateTable.push([` Update available: ${lastedVersion} `])
        console.log(chalk.red(updateTable))
        console.log(chalk.red(`最新版本为:${lastedVersion},建议你升级为新版`))
        console.log(chalk.green(`> npm i -g jmvn`))
    } else {
        viewProgram()
    }
}).catch(error => {
    if (error === 'TIMEOUT') {
        viewProgram()
    }
})

